// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(uuid())
  createdAt          DateTime       @default(now())
  username           String         @unique
  firstName          String         @db.VarChar(30)
  lastName           String         @db.VarChar(30)
  email              String         @unique
  password           String
  totalBalance       String
  pocketTotalBalance String
  Bank_Account       Bank_Account[]
  Pocket             Pocket[]
}

enum BANK_NAMES {
  NATWEST
  NATIONWIDE
  HALIFAX
  HSBC
  SANTANDER
  MONZO
}

model Bank_Account {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  bankName  BANK_NAMES
  balance   Decimal
  digits    String
  name      String     @db.VarChar(55)
  color     String     @db.VarChar(30)
  userId    String
  user      User       @relation(fields: [userId], references: [id])
}

model Pocket {
  id                 String              @id @default(uuid())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  balance            Decimal
  name               String              @db.VarChar(30)
  color              String              @db.VarChar(30)
  icon               String
  pocketTransactions PocketTransaction[]
  userId             String
  user               User                @relation(fields: [userId], references: [id])
  target             target?
  isMain             Boolean             @default(false)
}

model PocketTransaction {
  id              String   @id @default(uuid())
  date            DateTime @default(now())
  previousBalance Decimal
  balanceAfter    Decimal
  isDeposit       Boolean
  pocketId        String
  pocket          Pocket   @relation(fields: [pocketId], references: [id], onDelete: Cascade)
}

model target {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  target     Decimal
  targetDate DateTime
  pocketId   String @unique
  pocket     Pocket   @relation(fields: [pocketId], references: [id], onDelete: Cascade)
}
