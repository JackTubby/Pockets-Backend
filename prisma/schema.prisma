// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(cuid())
  firstName   String
  lastName    String
  email       String        @unique
  password    String        @default("password")
  createdAt   DateTime      @default(now())
  summary     Summary[]
  incomes     Income[]
  outgoings   Outgoing[]
  Saving      Saving[]
  Expenditure Expenditure[]
  Debt        Debt[]
  Payment     Payment[]
}

model Income {
  id           String    @id @default(cuid())
  amount       Decimal   @db.Decimal(10, 2)
  createdAt    DateTime  @default(now())
  userId       String
  categoryId   String
  notes        String?
  expectedDate DateTime?
  actualDate   DateTime?
  user         User      @relation(fields: [userId], references: [id])
  category     Category  @relation(fields: [categoryId], references: [id])
}

model Outgoing {
  id           String    @id @default(cuid())
  amount       Decimal   @db.Decimal(10, 2)
  actualAmount Decimal   @db.Decimal(10, 2)
  createdAt    DateTime  @default(now())
  userId       String
  categoryId   String
  name         String
  completed    Boolean   @default(false)
  notes        String?
  expectedDate DateTime?
  actualDate   DateTime?
  user         User      @relation(fields: [userId], references: [id])
  category     Category  @relation(fields: [categoryId], references: [id])
}

model Saving {
  id             String    @id @default(cuid())
  amount         Decimal   @db.Decimal(10, 2)
  expectedAmount Decimal?  @db.Decimal(10, 2)
  actualAmount   Decimal?  @db.Decimal(10, 2)
  name           String
  completed      Boolean   @default(false)
  expectedDate   DateTime?
  actualDate     DateTime?
  categoryId     String
  createdAt      DateTime  @default(now())
  userId         String
  notes          String?
  user           User      @relation(fields: [userId], references: [id])
  category       Category  @relation(fields: [categoryId], references: [id])
}

model Expenditure {
  id           String    @id @default(cuid())
  amount       Decimal   @db.Decimal(10, 2)
  actualAmount Decimal   @db.Decimal(10, 2)
  createdAt    DateTime  @default(now())
  userId       String
  categoryId   String
  name         String
  completed    Boolean   @default(false)
  notes        String?
  expectedDate DateTime?
  actualDate   DateTime?
  user         User      @relation(fields: [userId], references: [id])
  category     Category  @relation(fields: [categoryId], references: [id])
}

model Category {
  id          String        @id @default(cuid())
  name        String
  type        CategoryType
  createdAt   DateTime      @default(now())
  incomes     Income[]
  outgoings   Outgoing[]
  Saving      Saving[]
  Expenditure Expenditure[]
}

enum CategoryType {
  INCOME
  OUTGOING
  SAVING
}

model Summary {
  id          String   @id @default(cuid())
  income      Decimal  @db.Decimal(10, 2)
  outgoing    Decimal  @db.Decimal(10, 2)
  expenditure Decimal  @db.Decimal(10, 2)
  saving      Decimal  @db.Decimal(10, 2)
  net         Decimal  @db.Decimal(10, 2)
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())
  userId      String
  User        User?    @relation(fields: [userId], references: [id])
}

model Debt {
  id          String    @id @default(cuid())
  description String
  amount      Decimal   @db.Decimal(10, 2)
  startDate   DateTime
  dueDate     DateTime?
  status      String?
  paid        Decimal?  @db.Decimal(10, 2)
  remaining   Decimal?  @db.Decimal(10, 2)
  payments    Payment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  User        User?     @relation(fields: [userId], references: [id])
}

model Payment {
  id          String   @id @default(cuid())
  amount      Decimal  @db.Decimal(10, 2)
  paymentDate DateTime @default(now())
  debt        Debt     @relation(fields: [debtId], references: [id])
  debtId      String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User?    @relation(fields: [userId], references: [id])
}
